/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace HoloToolkit.Sharing {

public class DirectPairReceiver : PairMaker {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal DirectPairReceiver(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharingClientPINVOKE.DirectPairReceiver_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DirectPairReceiver obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DirectPairReceiver() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SharingClientPINVOKE.delete_DirectPairReceiver(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public DirectPairReceiver() : this(SharingClientPINVOKE.new_DirectPairReceiver__SWIG_0(), true) {
  }

  public DirectPairReceiver(ushort port) : this(SharingClientPINVOKE.new_DirectPairReceiver__SWIG_1(port), true) {
  }

  public override bool IsReceiver() {
    bool ret = SharingClientPINVOKE.DirectPairReceiver_IsReceiver(swigCPtr);
    return ret;
  }

  public override int GetAddressCount() {
    int ret = SharingClientPINVOKE.DirectPairReceiver_GetAddressCount(swigCPtr);
    return ret;
  }

  public override XString GetAddress(int index) {
    global::System.IntPtr cPtr = SharingClientPINVOKE.DirectPairReceiver_GetAddress(swigCPtr, index);
    XString ret = (cPtr == global::System.IntPtr.Zero) ? null : new XString(cPtr, true);
    return ret; 
  }

  public override ushort GetPort() {
    ushort ret = SharingClientPINVOKE.DirectPairReceiver_GetPort(swigCPtr);
    return ret;
  }

  public override void Update() {
    SharingClientPINVOKE.DirectPairReceiver_Update(swigCPtr);
  }

  public override bool IsReadyToConnect() {
    bool ret = SharingClientPINVOKE.DirectPairReceiver_IsReadyToConnect(swigCPtr);
    return ret;
  }

  public void SetIncomingPort(ushort port) {
    SharingClientPINVOKE.DirectPairReceiver_SetIncomingPort(swigCPtr, port);
  }

}

}
